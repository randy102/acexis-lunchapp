{"version":3,"sources":["graphql/login.js","services/auth.js","services/user.js","components/auth/Login.js","components/Header.js","graphql/user.js","components/app/Password.js","graphql/order.js","components/admin/custom/Grid.js","components/app/OrderGrid.js","components/admin/custom/AddBtn.js","components/app/OrderAddBtn.js","graphql/menu.js","components/app/ItemGrid.js","components/app/Menu.js","components/admin/custom/DeleteBtn.js","components/app/OrderDelete.js","components/admin/custom/ConfirmBtn.js","components/app/OrderConfirm.js","components/app/Order.js","route/AppRoute.js","components/app/App.js","graphql/site.js","components/admin/site/SiteGrid.js","components/admin/site/SiteAddBtn.js","components/admin/site/SiteDeleteBtn.js","components/admin/site/SiteEditBtn.js","components/admin/Site.js","components/admin/user/UserGrid.js","components/admin/user/SiteOption.js","components/admin/user/UserAddBtn.js","components/admin/user/UserDeleteBtn.js","components/admin/user/UserEditBtn.js","components/admin/User.js","graphql/shop.js","components/admin/shop/ShopGrid.js","components/admin/shop/ShopDeleteBtn.js","components/admin/custom/EditBtn.js","components/admin/shop/ShopEditBtn.js","graphql/dish.js","components/admin/dish/DishGrid.js","components/admin/dish/DishAddBtn.js","components/admin/dish/DishDeleteBtn.js","components/admin/dish/DishEditBtn.js","components/admin/Dish.js","components/admin/shop/ShopAddBtn.js","components/admin/Shop.js","components/admin/order/OrderGrid.js","components/admin/order/OrderDeleteBtn.js","components/admin/Order.js","components/admin/menu/MenuGrid.js","components/admin/menu/MenuDeleteBtn.js","components/admin/menu/MenuEditBtn.js","services/menu.js","graphql/item.js","components/admin/item/ItemGrid.js","components/admin/item/ItemAddBtn.js","components/admin/item/ItemDeleteBtn.js","components/admin/item/ItemEditBtn.js","components/admin/item/ShopOption.js","components/admin/item/ItemAddFromShop.js","components/admin/item/ItemAddFromExcel.js","components/admin/order/UserOption.js","components/admin/order/OrderAddBtn.js","components/admin/Item.js","components/admin/menu/MenuAddBtn.js","components/admin/menu/MenuSite.js","components/admin/menu/MenuInfo.js","components/admin/Menu.js","graphql/config.js","components/admin/Config.js","route/AdminRoute.js","components/admin/LeftBar.js","components/admin/Admin.js","services/guard.js","route/IndexRoute.js","components/MenuPublishedNotification.js","components/App.js","configs/apollo.js","index.js"],"names":["USER_LOGIN","gql","isLogin","getToken","jwt","verify","process","err","window","localStorage","getItem","getUser","field","decode","hashPassword","pass","sha","update","digest","checkEmpty","fields","key","isValid","error","Login","useLazyQuery","doLogin","data","useState","btnLoding","setBtnLoading","name","setName","password","setPassword","useEffect","token","login","message","setItem","role","to","id","type","className","onSubmit","e","preventDefault","variables","Item","prefix","style","color","placeholder","value","onChange","target","Password","htmlType","loading","Header","position","zIndex","width","height","theme","mode","lineHeight","float","SubMenu","title","replace","onClick","removeItem","GET_USER","ADD_USER","DELETE_USER","UPDATE_USER","CHANGE_PASSWORD","oldPass","setOldPass","newPass","setNewPass","setLoading","useMutation","changePassword","handleSubmit","old","success","margin","block","GET_ORDERS","GET_USER_ORDERS","CONFIRM_ORDER","DELETE_ORDER","ADD_ORDER","ADD_ORDER_USER","Grid","props","undefined","api","setApi","showLoadingOverlay","console","hideOverlay","Object","values","length","showNoRowsOverlay","rowSelection","multiple","onGridReady","param","sizeColumnsToFit","setGridApi","columnDefs","rowData","onRowSelected","onRowClicked","pagination","paginationPageSize","pageSize","defaultColDef","filter","sortable","resizable","OrderGrid","setOrderApi","checkboxSelection","headerName","AddBtn","showModal","btnName","visible","onOk","handleOk","confirmLoading","onCancel","handleCancel","children","OrderAddBtn","gridApi","refetch","orderApi","setVisible","setConfirmLoading","item","note","setNote","quantity","setQuantity","addOrder","addOrderUser","getDisplayedRowCount","selected","getSelectedRows","min","max","ADD_MENU","GET_MENUS","GET_USER_MENU","DELETE_MENU","UPDATE_MENU","MENU_PUBLISHED_SUBS","ItemGrid","curMenu","doRefetch","useQuery","Menu","orderRefetch","menuRefetch","setDoRefetch","DeleteBtn","confirmTitle","onConfirm","handleDelete","okText","cancelText","maskClosable","OrderDeleteBtn","deleteOrder","_id","ConfirmBtn","handleConfirm","OrderConfirmBtn","confirmOrder","log","Order","setMenuRefetch","orderData","orderLoading","orderError","orderProps","AppRoute","path","match","url","component","App","GET_SITES","ADD_SITE","DELETE_SITE","UPDATE_SITE","SiteGrid","SiteAddBtn","addSite","SiteDeleteBtn","deleteSite","SiteEditBtn","updateSite","setId","Site","status","subTitle","UserGrid","users","site","map","user","newUser","siteId","Option","SiteOption","suffixIcon","setSite","sites","renderOption","UserAddBtn","setRole","addUser","UserDeleteBtn","deleteUser","UserEditBtn","setStatus","updateUser","JSON","stringify","disabled","User","GET_SHOPS","ADD_SHOP","UPDATE_SHOP","DELETE_SHOP","ShopGrid","handleClick","ShopDeleteBtn","setCurShop","deleteShop","EditBtn","handleEdit","ShopEditBtn","updateShop","GET_DISHES","DELETE_DISH","ADD_DISH","UPDATE_DISH","DishGrid","curShop","parentDef","shop","DishAddBtn","addDish","DishDeleteBtn","DishEditBtn","updateDish","Dish","ShopAddBtn","Shop","shopApi","setShopApi","shopRefetch","span","offset","rowGroup","MenuGrid","suppressSizeToFit","MenuDeleteBtn","setCurMenu","deleteMenu","MenuEditBtn","updateMenu","curStatus","statusCheck","prevStatus","rowStatus","getRenderedNodes","node","includes","checkMenuStatus","GET_ITEMES","DELETE_ITEM","ADD_ITEM","ADD_ITEMS_SHOP","UPDATE_ITEM","menu","ItemAddBtn","total","setTotal","addItem","defaultValue","ItemDeleteBtn","deleteItem","ItemEditBtn","booked","setBooked","updateItem","ShopOption","setShop","shops","ItemAddFromShop","items","showIcon","Dragger","ItemAddFromExcel","uploadProps","action","authorization","info","file","fileList","UserOption","setUserId","curSite","valueGetter","setUser","remaining","setRemaining","menuState","marginTop","classList","contains","MenuAddBtn","addMenu","dateString","Date","toDateString","MenuSite","marginBottom","MenuInfo","setMenuApi","setMenuState","GET_CONFIG","UPDATE_CONFIG","Config","order","setOrder","closeConfirm","setConfirm","startConfirm","setStartConfirm","forceRefetch","setForceRefetch","afterUpdate","config","closeOrder","justify","align","textAlign","time","hour24Mode","newTime","formatted24","AdminRoute","Sider","getKey","curPath","split","String","indexOf","leftBarStyle","overflow","left","top","LeftBar","selectedKeys","location","pathname","padding","fontWeight","Admin","appGuard","adminGuard","IndexRoute","render","MenuPublishedNotification","useSubscription","menuPublished","notification","open","icon","placement","httpLink","HttpLink","uri","authLink","setContext","_","headers","wsLink","WebSocketLink","options","reconnect","linkSplit","query","getMainDefinition","kind","operation","link","ApolloLink","from","client","ApolloClient","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.959994a4.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nexport const USER_LOGIN = gql`\r\n    query Login($name: String!, $password: String!){\r\n        login(name: $name, password: $password)\r\n    }\r\n`;","import jwt from \"jsonwebtoken\"\r\nimport sha from \"sha.js\";\r\n\r\nexport function isLogin(){\r\n    if(getToken()){\r\n        try{\r\n            jwt.verify(getToken(), process.env.REACT_APP_JWT_SECRET);\r\n            return true\r\n        }\r\n        catch(err){\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function logOut(){\r\n    window.localStorage.removeItem(\"token\");\r\n}\r\n\r\nexport function logIn(token){\r\n    window.localStorage.setItem(\"token\", token);\r\n}\r\n\r\nexport function getToken(){\r\n    return window.localStorage.getItem(\"token\");\r\n}\r\n\r\nexport function getUser(field){\r\n    if(field){\r\n        return jwt.decode(getToken())[field];\r\n    }\r\n    else\r\n        return jwt.decode(getToken());\r\n}\r\n\r\nexport function hashPassword(pass){\r\n    return sha('sha256').update(pass).digest('hex');\r\n}","export function checkEmpty(fields){\r\n    \r\n        for(let key in fields){\r\n            if(fields[key] === '')\r\n            return {isValid: false, error: `${key} field is empty!`};\r\n        }\r\n        return {isValid: true, error: ''}\r\n \r\n   \r\n    \r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport {useLazyQuery} from \"@apollo/client\"\r\nimport { Form, Icon, Input, Button, message } from \"antd\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport sha from \"sha.js\";\r\nimport { USER_LOGIN } from '../../graphql/login';\r\nimport { isLogin, getUser, logIn, hashPassword } from '../../services/auth';\r\nimport {checkEmpty} from \"../../services/user\"\r\nimport \"../../assets/css/auth.css\"\r\n\r\nexport default function Login() {\r\n    const [doLogin, {data}] = useLazyQuery(USER_LOGIN);\r\n    const [btnLoding, setBtnLoading] = useState(false);\r\n    const [name,setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n \r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        const {error,isValid} = checkEmpty({name,password});\r\n        if(!isValid){\r\n            message.error(error);\r\n            return;\r\n        }\r\n        setBtnLoading(true);\r\n        doLogin({\r\n            variables:{\r\n                name,\r\n                password: hashPassword(password)\r\n            }\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        if(data){\r\n            setBtnLoading(false);\r\n            if(data.login === \"error\"){\r\n                message.error(\"Login Fail!\");\r\n                setName(\"\");\r\n                setPassword(\"\");\r\n            }\r\n            else\r\n                logIn(data.login);\r\n        }\r\n    },[data])\r\n    \r\n\r\n    if(isLogin()){\r\n        const role = getUser('role');\r\n        if(role === \"ADMIN\" || role === \"MOD\")\r\n            return <Redirect to=\"/admin\" />\r\n        else\r\n            return <Redirect to=\"/app\" />\r\n    }\r\n\r\n    return (\r\n        <div id=\"loginFormWrap\">\r\n            <h1><Icon type=\"user\" /> Login</h1>\r\n\r\n            <Form className=\"login-form\" onSubmit={handleSubmit}>\r\n                <Form.Item>\r\n                    <Input\r\n                        prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }}/>}\r\n                        placeholder=\"User name...\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Input.Password\r\n                        prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }}/>}\r\n                        placeholder=\"Password...\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                   \r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" loading={btnLoding}>\r\n                        Log in\r\n                    </Button>\r\n                   \r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Layout, Menu, Icon } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logOut } from \"../services/auth\";\r\n\r\nexport default function Header() {\r\n    function handleLogOut() {\r\n        logOut();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Layout.Header\r\n                style={{\r\n                    position: \"fixed\",\r\n                    zIndex: 1,\r\n                    width: \"100%\",\r\n                    height: 40\r\n                }}\r\n            >\r\n                <Menu\r\n                    theme=\"light\"\r\n                    mode=\"horizontal\"\r\n                    style={{ lineHeight: \"40px\", float: \"right\" }}\r\n                >\r\n                    <Menu.SubMenu\r\n                        title={\r\n                            <span className=\"submenu-title-wrapper\">\r\n                                <Icon type=\"setting\" />\r\n                                Options\r\n                            </span>\r\n                        }\r\n                    >\r\n                        <Menu.Item key=\"setting:1\">\r\n                            <Link to=\"/\" replace onClick={handleLogOut}>\r\n                                <Icon type=\"logout\" />\r\n                                Log out\r\n                            </Link>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item key=\"setting:2\">\r\n                            <Link to=\"/app/password\" replace>\r\n                                <Icon type=\"lock\" />\r\n                                Change Password\r\n                            </Link>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item key=\"setting:3\">\r\n                            <Link to=\"/app\" replace>\r\n                                <Icon type=\"home\" />\r\n                                App\r\n                            </Link>\r\n                        </Menu.Item>\r\n\r\n                        <Menu.Item key=\"setting:4\">\r\n                            <Link to=\"/admin\" replace>\r\n                                <Icon type=\"user\" />\r\n                                Admin\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    </Menu.SubMenu>\r\n                </Menu>\r\n            </Layout.Header>\r\n        </div>\r\n    );\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_USER = gql`\r\n    query Users($site: String){\r\n        users(site: $site){\r\n            _id\r\n            name\r\n            status\r\n            role\r\n            site{\r\n                _id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation AddUser($user: AddUserInput){\r\n        addUser(user: $user){\r\n            _id\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_USER = gql`\r\n    mutation DeleteUser($id: String!){\r\n        deleteUser(id: $id){\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_USER = gql`\r\n    mutation UpdateUser($id: String!, $data: String!){\r\n        updateUser(id:$id, data: $data){\r\n            _id\r\n        }\r\n    }\r\n`\r\n\r\nexport const CHANGE_PASSWORD = gql `\r\n    mutation ChangePassword($old: String!, $password: String!){\r\n        changePassword(old: $old, password: $password){\r\n            success\r\n            error\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, Icon, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CHANGE_PASSWORD } from \"../../graphql/user\";\r\nimport { hashPassword } from \"../../services/auth\";\r\n\r\nexport default function Password() {\r\n    const [oldPass, setOldPass] = useState(\"\");\r\n    const [newPass, setNewPass] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [changePassword, { data }] = useMutation(CHANGE_PASSWORD);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        changePassword({\r\n            variables: {\r\n                old: hashPassword(oldPass),\r\n                password: hashPassword(newPass)\r\n            }\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        if (data) {\r\n            setLoading(false);\r\n            if (data.changePassword.success) message.success(data.changePassword.success);\r\n            else message.error(data.changePassword.error);\r\n            setNewPass(\"\");\r\n            setOldPass(\"\");\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div style={{ width: 300, margin: \"50px auto\" }}>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Item>\r\n                    <Input.Password\r\n                        prefix={\r\n                            <Icon\r\n                                type=\"lock\"\r\n                                style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                            />\r\n                        }\r\n                        value={oldPass}\r\n                        onChange={e => setOldPass(e.target.value)}\r\n                        placeholder=\"Current password...\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Input.Password\r\n                        prefix={\r\n                            <Icon\r\n                                type=\"lock\"\r\n                                style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                            />\r\n                        }\r\n                        value={newPass}\r\n                        onChange={e => setNewPass(e.target.value)}\r\n                        placeholder=\"New password...\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button\r\n                        loading={loading}\r\n                        onClick={handleSubmit}\r\n                        block\r\n                        type=\"primary\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_ORDERS = gql`\r\n    query {\r\n        orders{\r\n            _id\r\n            item\r\n            user\r\n            site\r\n            confirmed\r\n            note\r\n            quantity\r\n            created_date\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_USER_ORDERS = gql`\r\n    query{\r\n        orderOfUser{\r\n            _id\r\n            item\r\n            note\r\n            quantity\r\n            confirmed\r\n            created_date\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CONFIRM_ORDER = gql`\r\n    mutation ConfirmOrder($id: String!){\r\n        confirmOrder(id: $id){\r\n            success\r\n            error\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ORDER = gql`\r\n    mutation DeleteOrder($id: String!){\r\n        deleteOrder(id: $id)\r\n    }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n    mutation AddOrder($user: String!, $quantity: Int!, $item: String!, $note: String!){\r\n        addOrder(user: $user, quantity: $quantity, item: $item, note: $note)\r\n    }\r\n`;\r\n\r\nexport const ADD_ORDER_USER = gql`\r\n    mutation AddOrderUser( $quantity: Int!, $item: String!, $note: String!){\r\n        addOrderUser(quantity: $quantity, item: $item, note: $note){\r\n            success\r\n            error\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ORDER = gql`\r\n    mutation UpdateOrder($id: String!, $name: String!){\r\n        updateOrder(id: $id, name: $name){\r\n            name\r\n        }\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\n\r\nexport default function Grid(props) {\r\n    const [api, setApi] = useState(undefined);\r\n\r\n    const defaultColDef = {\r\n        filter: true, // set filtering on for all cols,\r\n        sortable: true,\r\n        resizable: true\r\n    };\r\n\r\n    function onReady(param) {\r\n        param.api.sizeColumnsToFit();\r\n        setApi(param.api);\r\n        if(props.setGridApi) props.setGridApi(param.api);\r\n    }\r\n    \r\n    if (api) {\r\n        if (props.loading) api.showLoadingOverlay();//When loading\r\n\r\n        else if (props.error) console.error(props.error); //When error\r\n\r\n        else { //When data loaded\r\n            api.hideOverlay(); \r\n            if(Object.values(props.data)[0].length == 0) //If data is empty\r\n                api.showNoRowsOverlay();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"ag-theme-balham\"\r\n            style={{ height: props.height || \"450px\", width: \"100%\" }}\r\n        >\r\n            <AgGridReact\r\n                rowSelection={props.multiple ? \"multiple\" : \"single\"}\r\n                onGridReady={onReady}\r\n                columnDefs={props.columnDefs}\r\n                rowData={props.data ? Object.values(props.data)[0] : []} //Get first property of data object\r\n                onRowSelected={props.onRowClicked || undefined}\r\n                pagination={props.pagination || false}\r\n                paginationPageSize={props.pageSize || undefined}\r\n                defaultColDef={defaultColDef}\r\n            ></AgGridReact>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from \"../admin/custom/Grid\";\r\n\r\nexport default function OrderGrid({data,loading,error, setOrderApi, height}) {\r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 60},\r\n        { headerName: \"Item\", field: \"item\" },\r\n        { headerName: \"Quantity\", field: \"quantity\"},\r\n        { headerName: \"Note\", field: \"note\" },\r\n        { headerName: \"Booked Date\", field: \"created_date\"},\r\n    ];\r\n\r\n    const props = {\r\n        setGridApi : setOrderApi,\r\n        loading,\r\n        error,\r\n        columnDefs,\r\n        data,\r\n        pagination: false,\r\n        height\r\n    }\r\n\r\n    return (\r\n        \r\n            <Grid {...props}/>\r\n      \r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Button,Modal} from \"antd\";\r\n\r\nexport default function AddBtn(props) {\r\n\r\n    return (\r\n        <div className=\"user-btn\">\r\n\r\n            <Button type=\"primary\" onClick={props.showModal}>\r\n                {props.btnName}\r\n            </Button>\r\n            \r\n            <Modal\r\n                title= {props.btnName}\r\n                visible={props.visible}\r\n                onOk={props.handleOk}\r\n                confirmLoading={props.confirmLoading}\r\n                onCancel={props.handleCancel}\r\n            >\r\n                {props.children}\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, message, InputNumber, Input } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport AddBtn from \"../admin/custom/AddBtn\";\r\nimport { ADD_ORDER_USER } from \"../../graphql/order\";\r\n\r\n\r\nexport default function OrderAddBtn({ gridApi, refetch, orderApi }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const [item, setItem] = useState(\"\");\r\n    const [note, setNote] = useState(\"\");\r\n    const [quantity, setQuantity] = useState(1);\r\n\r\n    const [addOrder, { data }] = useMutation(ADD_ORDER_USER);\r\n\r\n    function showModal() {\r\n        const orders = orderApi.getDisplayedRowCount();\r\n        if(orders > 0){\r\n            message.error(\"You have ordered already!\");\r\n            return;\r\n        }\r\n\r\n\r\n        let selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n\r\n            if (selected[\"total\"] - selected[\"booked\"] <= 0) {\r\n                message.error(\"Item out of stock!\");\r\n                return;\r\n            }\r\n\r\n            setItem(selected[\"_id\"]);\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Item!\");\r\n        }\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n\r\n        setConfirmLoading(true);\r\n        \r\n        addOrder({\r\n            variables: {\r\n                quantity,\r\n                item,\r\n                note\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(data && data.addOrderUser.error){\r\n            message.error(data.addOrderUser.error);\r\n        }\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setQuantity(1);\r\n        setNote(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Order\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n\r\n    return (\r\n        <AddBtn {...props}>\r\n            <Form>\r\n                <b>Quantity: </b>\r\n                <InputNumber\r\n                    min={1}\r\n                    max={1}\r\n                    value={quantity}\r\n                    onChange={value => setQuantity(value)}\r\n                    placeholder=\"Quantity...\"\r\n                />\r\n                <div style={{ margin: \"10px 0\" }}></div>\r\n                <Input\r\n                    type=\"text\"\r\n                    onChange={e => setNote(e.target.value)}\r\n                    value={note}\r\n                    placeholder=\"Note...\"\r\n                />\r\n            </Form>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ADD_MENU = gql`\r\n    mutation AddMenu($name: String!, $site: String!, $status: MenuStatus!) {\r\n        addMenu(name: $name, site: $site, status: $status) {\r\n            _id\r\n        }\r\n    }\r\n`;\r\nexport const GET_MENUS = gql`\r\n    query Menus($site: String!) {\r\n        menus(site: $site) {\r\n            _id\r\n            site {\r\n                _id\r\n                name\r\n            }\r\n            name\r\n            status\r\n            created_date\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_USER_MENU = gql`\r\n    query {\r\n        userMenu {\r\n            _id\r\n            name\r\n            booked\r\n            total\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MENU = gql`\r\n    mutation DeleteMenu($id: String!) {\r\n        deleteMenu(id: $id) {\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MENU = gql`\r\n    mutation UpdateMenu($id: String!, $status: MenuStatus!, $name: String!) {\r\n        updateMenu(id: $id, status: $status, name: $name) {\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MENU_PUBLISHED_SUBS = gql`\r\n    subscription Menu($site: String){\r\n        menuPublished(site: $site){\r\n            _id\r\n        }\r\n    }\r\n`","import React, { useEffect } from \"react\";\r\nimport Grid from \"../admin/custom/Grid\";\r\nimport { useQuery, useSubscription } from \"@apollo/client\";\r\n\r\nimport { GET_USER_MENU, GET_USER_MENU_SUB } from '../../graphql/menu';\r\nimport { getUser } from \"../../services/auth\";\r\n\r\nexport default function ItemGrid({curMenu, setGridApi, doRefetch, height}) {\r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 60},\r\n        { headerName: \"Name\", field: \"name\"},\r\n        { headerName: \"Booked\", field: \"booked\"},\r\n        { headerName: \"Total\", field: \"total\"},\r\n    ];\r\n    \r\n    const { data, loading, error, refetch} = useQuery(GET_USER_MENU);\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch, curMenu]);\r\n   \r\n    const props = {\r\n        setGridApi,\r\n        columnDefs,\r\n        data,\r\n        loading,\r\n        error,\r\n        height\r\n    }\r\n    \r\n    return (\r\n        <Grid {...props}/>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport OrderAddBtn from './OrderAddBtn'\r\nimport ItemGrid from './ItemGrid';\r\n\r\nexport default function Menu({orderRefetch, menuRefetch, orderApi}) {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n\r\n    function refetch(){\r\n        setDoRefetch(!doRefetch);\r\n        orderRefetch();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        refetch();\r\n    },[menuRefetch])\r\n\r\n    return (\r\n        <div>\r\n            <OrderAddBtn gridApi={gridApi} refetch={refetch} orderApi={orderApi}/>\r\n            <ItemGrid setGridApi={setGridApi} doRefetch={doRefetch} height=\"400px\"/>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Button,Popconfirm, Icon, Modal } from \"antd\";\r\n\r\nexport default function DeleteBtn(props) {\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Popconfirm\r\n                title={props.confirmTitle}\r\n                onConfirm={props.handleDelete}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type=\"danger\">{props.btnName}</Button>\r\n                <Modal\r\n                    title=\"Deleting...\"\r\n                    visible={props.visible}\r\n                    maskClosable={false}\r\n                >\r\n                    <Icon type=\"loading\"/>\r\n                </Modal>\r\n            </Popconfirm>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport DeleteBtn from \"../admin/custom/DeleteBtn\";\r\nimport { DELETE_ORDER } from \"../../graphql/order\";\r\n\r\nexport default function OrderDeleteBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteOrder, { data }] = useMutation(DELETE_ORDER);\r\n\r\n    function handleDelete() {\r\n        const selected = gridApi.getSelectedRows();\r\n        \r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteOrder({ variables: { id } });\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Order!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Order?\",\r\n        btnName: \"Delete Order\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React from 'react'\r\nimport { Button,Popconfirm, Icon, Modal } from \"antd\";\r\n\r\nexport default function ConfirmBtn(props) {\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Popconfirm\r\n                title={props.confirmTitle}\r\n                onConfirm={props.handleConfirm}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type=\"default\">{props.btnName}</Button>\r\n                <Modal\r\n                    title=\"Confirming...\"\r\n                    visible={props.visible}\r\n                    maskClosable={false}\r\n                >\r\n                    <Icon type=\"loading\"/>\r\n                </Modal>\r\n            </Popconfirm>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport ConfirmBtn from \"../admin/custom/ConfirmBtn\";\r\nimport { CONFIRM_ORDER } from \"../../graphql/order\";\r\n\r\nexport default function OrderConfirmBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmOrder, { data }] = useMutation(CONFIRM_ORDER);\r\n\r\n    function handleConfirm() {\r\n        const selected = gridApi.getSelectedRows();\r\n        \r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            confirmOrder({ variables: { id } });\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Order!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n            console.log({data});\r\n            if(data && data.confirmOrder.success)\r\n                message.success(data.confirmOrder.success)\r\n            \r\n            if(data && data.confirmOrder.error)\r\n                message.error(data.confirmOrder.error)\r\n        \r\n        refetch();\r\n        setVisible(false);\r\n        \r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure confirm this Order?\",\r\n        btnName: \"Confirm Order\",\r\n        handleConfirm\r\n    };\r\n    return <ConfirmBtn {...props} />;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport * as moment from \"moment\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_USER_ORDERS } from \"../../graphql/order\";\r\nimport OrderGrid from \"./OrderGrid\";\r\nimport { Divider, Icon } from \"antd\";\r\nimport Menu from \"./Menu\";\r\nimport OrderDeleteBtn from \"./OrderDelete\";\r\nimport OrderConfirmBtn from \"./OrderConfirm\";\r\n\r\nexport default function Order() {\r\n    const [orderApi, setOrderApi] = useState(undefined);\r\n    const [menuRefetch, setMenuRefetch] = useState(false);\r\n\r\n    const {\r\n        data: orderData,\r\n        loading: orderLoading,\r\n        error: orderError,\r\n        refetch: orderRefetch\r\n    } = useQuery(GET_USER_ORDERS);\r\n\r\n    const orderProps = {\r\n        data: orderData,\r\n        loading: orderLoading,\r\n        error: orderError,\r\n        setOrderApi\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"menu\" /> Menu\r\n                </h1>\r\n            </Divider>\r\n            <Menu orderApi={orderApi} orderRefetch={() => orderRefetch()} menuRefetch={menuRefetch}/>\r\n\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"profile\" /> Ordered\r\n                </h1>\r\n            </Divider>\r\n            <OrderDeleteBtn gridApi={orderApi} refetch={() => {orderRefetch(); setMenuRefetch(!menuRefetch)}} />\r\n            <OrderConfirmBtn gridApi={orderApi} refetch={()=>{orderRefetch()}} />\r\n            <OrderGrid {...orderProps} height=\"200px\"/>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Password from \"../components/app/Password\";\r\nimport Order from \"../components/app/Order\";\r\n\r\nexport default function AppRoute(props) {\r\n    return (\r\n        <div id=\"AppRouteWrap\">\r\n                <Switch>\r\n                    <Route path={`${props.match.url}/password`} component={Password} />\r\n                    <Route path={`${props.match.url}/order`} component={Order} />\r\n                    <Route path={`${props.match.url}/`} component={Order} />\r\n                </Switch>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Header from \"../Header\"\r\nimport AppRoute from '../../route/AppRoute'\r\nimport \"../../assets/css/app.css\"\r\n\r\nexport default function App(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <AppRoute {...props}/>\r\n        </div>\r\n    )\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_SITES = gql`\r\n    query{\r\n        sites{\r\n            _id\r\n            name\r\n            count\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_SITE = gql`\r\n    mutation AddSite($name: String!){\r\n        addSite(name: $name){\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SITE = gql`\r\n    mutation DeleteSite($id: String!){\r\n        deleteSite(id: $id){\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SITE = gql`\r\n    mutation UpdateSite($id: String!, $name: String!){\r\n        updateSite(id:$id, name:$name){\r\n            name\r\n        }\r\n    }\r\n`;","import React, { useEffect } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_SITES } from \"../../../graphql/site\";\r\n\r\n\r\nexport default function SiteGrid({ setGridApi, doRefetch }) {\r\n    const columnDefs = [\r\n        {\r\n            checkboxSelection: true,\r\n            width: 20\r\n        },\r\n        { headerName: \"Name\", field: \"name\", sortable: true },\r\n        { headerName: \"Members\", field: \"count\", sortable: true }\r\n    ];\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_SITES);\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch]);\r\n\r\n    \r\n    \r\n    const props = {\r\n        error,\r\n        loading,\r\n        data,\r\n        setGridApi,\r\n        columnDefs,\r\n\r\n    }\r\n\r\n    return (\r\n        <Grid {...props} />\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, Input, Modal, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_SITE } from \"../../../graphql/site\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\n\r\nexport default function SiteAddBtn({refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [addSite, { data }] = useMutation(ADD_SITE);\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        addSite({\r\n            variables: {\r\n                name\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Add Site\r\n            </Button>\r\n            <Modal\r\n                title=\"Add Site\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={handleCancel}\r\n            >\r\n                <form>\r\n                    <Form.Item>\r\n                        <Input\r\n                            type=\"text\"\r\n                            onChange={e => setName(e.target.value)}\r\n                            value={name}\r\n                            placeholder=\"Site name...\"\r\n                        />\r\n                    </Form.Item>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, message, Popconfirm, Icon, Modal } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_SITE } from \"../../../graphql/site\";\r\n\r\nexport default function SiteDeleteBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteSite, { data }] = useMutation(DELETE_SITE);\r\n\r\n    function handleDelete() {\r\n        const selected = gridApi.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteSite({ variables: { id } });\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Site!\");\r\n        }\r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Popconfirm\r\n                title=\"Are you sure delete this Site? This action will delete all the user of this Site!\"\r\n                onConfirm={handleDelete}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type=\"danger\">Delete Site</Button>\r\n                <Modal\r\n                    title=\"Deleting...\"\r\n                    visible={visible}\r\n                    maskClosable={false}\r\n                >\r\n                    <Icon type=\"loading\"/>\r\n                </Modal>\r\n            </Popconfirm>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, Input, Modal, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UPDATE_SITE } from '../../../graphql/site';\r\nimport { checkEmpty } from \"../../../services/user\";\r\n\r\nexport default function SiteEditBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [updateSite, { data }] = useMutation(UPDATE_SITE);\r\n    const [id, setId] = useState(\"\");\r\n    function handleOk() {\r\n\r\n        const {isValid, error} = checkEmpty({name});\r\n\r\n        if(!isValid){\r\n            message.error(error);\r\n            return;\r\n        }\r\n        setConfirmLoading(true); \r\n\r\n        updateSite({\r\n            variables: {\r\n                id,\r\n                name\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        let selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n            setName(selected[\"name\"]);\r\n            setId(selected[\"_id\"]);\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Site!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Button type=\"ghost\" onClick={handleEdit}>\r\n                Edit User\r\n            </Button>\r\n            <Modal\r\n                title=\"Edit User\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={() => setVisible(false)}\r\n            >\r\n                <form>\r\n                    <Form.Item>\r\n                        <Input\r\n                            type=\"text\"\r\n                            onChange={e => setName(e.target.value)}\r\n                            value={name}\r\n                            placeholder=\"Site name...\"\r\n                        />\r\n                    </Form.Item>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Divider, Icon, Result } from 'antd'\r\nimport SiteGrid from \"./site/SiteGrid\"\r\nimport SiteAddBtn from './site/SiteAddBtn';\r\nimport SiteDeleteBtn from './site/SiteDeleteBtn';\r\nimport SiteEditBtn from './site/SiteEditBtn';\r\nimport { getUser } from '../../services/auth';\r\n\r\nexport default function Site() {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n    \r\n    function refetch(){\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n    \r\n    if (getUser(\"role\") === \"MOD\") {\r\n        return (\r\n            <Result\r\n                status=\"403\"\r\n                title=\"403\"\r\n                subTitle=\"Sorry, you are not authorized to access this page.\"\r\n            />\r\n        );\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n           <Divider>\r\n                <h1>\r\n                    <Icon type=\"apartment\" /> Site\r\n                </h1>\r\n            </Divider>\r\n            <SiteAddBtn refetch={refetch}/>\r\n            <SiteDeleteBtn gridApi={gridApi} refetch={refetch}/>\r\n            <SiteEditBtn gridApi={gridApi} refetch={refetch}/>\r\n            <SiteGrid  setGridApi={setGridApi} doRefetch={doRefetch}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_USER } from \"../../../graphql/user\";\r\nimport { Modal, Icon } from \"antd\";\r\n\r\nexport default function UserGrid({doRefetch, setGridApi}) {\r\n    const columnDefs = [\r\n        {\r\n            checkboxSelection: true,\r\n            width: 30\r\n        },\r\n        {\r\n            headerName: \"Name\",\r\n            field: \"name\",\r\n            sortable: true,\r\n            \r\n        },\r\n        { headerName: \"Site\", field: \"site\",  sortable: true, },\r\n        { headerName: \"Role\", field: \"role\" , sortable: true,},\r\n        { headerName: \"Status\", field: \"status\" , sortable: true,}\r\n    ];\r\n\r\n    function onReady(param) {\r\n        param.api.sizeColumnsToFit();\r\n        setGridApi(param.api)\r\n    }\r\n\r\n    function renderData(users) {\r\n        return users.map(user => {\r\n            const newUser = { ...user };\r\n            newUser.site = user.site.name;\r\n            newUser.siteId = user.site[\"_id\"];\r\n            return newUser;\r\n        });\r\n    }\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_USER, {\r\n        variables: {\r\n            site: \"\"\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n       refetch();\r\n    }, [doRefetch]);\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <div>\r\n                <Modal title=\"Loading...\" visible={true} maskClosable={false}>\r\n                    <Icon type=\"loading\" />\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n    if (error) {\r\n        return <div>Error</div>;\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n            <div\r\n                className=\"ag-theme-balham\"\r\n                style={{ height: \"300px\", width: \"100%\" }}\r\n            >\r\n                <AgGridReact\r\n                    onGridReady={onReady}\r\n                    rowSelection=\"multiple\"\r\n                    columnDefs={columnDefs}\r\n                    rowData={renderData(data.users)}\r\n                ></AgGridReact>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Select, Icon } from \"antd\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_SITES } from \"../../../graphql/site\";\r\nconst { Option } = Select;\r\n\r\nexport default function SiteOption(props) {\r\n    const { loading, error, data } = useQuery(GET_SITES);\r\n\r\n    function renderOption(data) {\r\n        return data.sites.map(site => (\r\n            <Option key={site[\"_id\"]} value={site[\"_id\"]}>{site[\"name\"]}</Option>\r\n        ));\r\n    }\r\n\r\n    \r\n    if (loading)\r\n        return (\r\n            <div>\r\n                <Select\r\n                    name=\"site\"\r\n                    placeholder=\"Choose site...\"\r\n                    suffixIcon={<Icon type=\"loading\" />}\r\n                ></Select>\r\n            </div>\r\n        );\r\n\r\n    if (error) console.error(error);\r\n    \r\n    return (\r\n        <div>\r\n            <Select\r\n                onChange={value => props.setSite(value)}\r\n                name=\"site\"\r\n                placeholder=\"Choose site...\"\r\n                value={props.site || undefined}\r\n            >\r\n                {renderOption(data)}\r\n            </Select>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, Input, Select, Modal, message } from \"antd\";\r\nimport SiteOption from \"./SiteOption\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport sha from \"sha.js\";\r\nimport { ADD_USER } from \"../../../graphql/user\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport {hashPassword} from \"../../../services/auth\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function UserAddBtn({refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [role, setRole] = useState('');\r\n    const [site, setSite] = useState(\"\");\r\n    const [name, setName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [addUser, {data}] = useMutation(ADD_USER);\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n        message.error(\"Not succeed!\");\r\n    }\r\n\r\n    function handleOk() {\r\n        const {isValid, error} = checkEmpty({name, password, role, site});\r\n\r\n        if(!isValid){\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n        \r\n        addUser({\r\n            variables: {\r\n                user: {\r\n                    name,\r\n                    password: hashPassword(password),\r\n                    status: \"ACTIVE\",\r\n                    role,\r\n                    site\r\n                }\r\n            }\r\n        });\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setRole('');\r\n        setSite('');\r\n        setName('');\r\n        setPassword('');\r\n    },[data])\r\n    \r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Add User\r\n            </Button>\r\n            <Modal\r\n                title=\"Add User\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={handleCancel}\r\n            >\r\n                <form>\r\n                    <Form.Item>\r\n                        <Input\r\n                            type=\"text\"\r\n                            onChange={e => setName(e.target.value)} \r\n                            value={name}\r\n                            placeholder=\"User name...\"\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Input.Password\r\n                            onChange={e => setPassword(e.target.value)} value={password}\r\n                            placeholder=\"Password...\"\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Select\r\n                            value={role}\r\n                            onChange={value => setRole(value)}\r\n                            name=\"role\"\r\n                            placeholder=\"Choose role...\"\r\n                        >\r\n                            <Option value=\"ADMIN\">Admin</Option>\r\n                            <Option value=\"MOD\">Mod</Option>\r\n                            <Option value=\"USER\">User</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <SiteOption site={site} setSite={setSite} />\r\n                    </Form.Item>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, message, Popconfirm, Icon, Modal } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_USER } from \"../../../graphql/user\";\r\n\r\nexport default function UserDeleteBtn({ gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteUser, { data }] = useMutation(DELETE_USER);\r\n\r\n    function handleDelete() {\r\n        const selected = gridApi.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteUser({ variables: { id } });\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a User!\");\r\n        }\r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        setVisible(false);\r\n        refetch();\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Popconfirm\r\n                title=\"Are you sure delete this User?\"\r\n                onConfirm={handleDelete}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type=\"danger\">Delete User</Button>\r\n                <Modal\r\n                    title=\"Deleting...\"\r\n                    visible={visible}\r\n                    maskClosable={false}\r\n                >\r\n                    <Icon type=\"loading\"/>\r\n                </Modal>\r\n            </Popconfirm>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, Input, Select, Modal, message } from \"antd\";\r\nimport SiteOption from \"./SiteOption\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UPDATE_USER } from \"../../../graphql/user\";\r\nimport { hashPassword } from \"../../../services/auth\";\r\nconst { Option } = Select;\r\n\r\nexport default function UserEditBtn({ gridApi, refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [role, setRole] = useState(\"\");\r\n    const [site, setSite] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [id, setId] = useState(\"\");\r\n    const [updateUser, { data }] = useMutation(UPDATE_USER);\r\n\r\n    function handleOk() {\r\n\r\n        setConfirmLoading(true);\r\n        let data = {\r\n            site,\r\n            role,\r\n            status\r\n        };\r\n\r\n        if (password !== \"\") data = { ...data, password: hashPassword(password) };\r\n\r\n        updateUser({\r\n            variables: {\r\n                id,\r\n                data: JSON.stringify(data)\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        let selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n            setRole(selected[\"role\"]);\r\n            setSite(selected[\"siteId\"]);\r\n            setStatus(selected[\"status\"]);\r\n            setName(selected[\"name\"]);\r\n            setId(selected[\"_id\"]);\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a User!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setPassword(\"\");\r\n    }, [data]);\r\n    \r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Button type=\"ghost\" onClick={handleEdit}>\r\n                Edit User\r\n            </Button>\r\n            <Modal\r\n                title=\"Edit User\"\r\n                visible={visible}\r\n                onOk={handleOk}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={() => setVisible(false)}\r\n            >\r\n                <form>\r\n                    <Form.Item>\r\n                        <Input value={name} disabled />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Input.Password\r\n                            placeholder=\"Password...\"\r\n                            onChange={e => setPassword(e.target.value)}\r\n                            value={password}\r\n                        />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Select\r\n                            onChange={value => setRole(value)}\r\n                            placeholder=\"Choose role...\"\r\n                            value={role}\r\n                        >\r\n                            <Option value=\"ADMIN\">Admin</Option>\r\n                            <Option value=\"MOD\">Mod</Option>\r\n                            <Option value=\"USER\">User</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <SiteOption site={site} setSite={setSite} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Select\r\n                            onChange={value => setStatus(value)}\r\n                            value={status}\r\n                        >\r\n                            <Option value=\"ACTIVE\">Active</Option>\r\n                            <Option value=\"BLOCKED\">Blocked</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport UserGrid from \"./user/UserGrid\";\r\nimport UserAddBtn from \"./user/UserAddBtn\";\r\nimport UserDeleteBtn from \"./user/UserDeleteBtn\";\r\nimport UserEditBtn from \"./user/UserEditBtn\";\r\nimport { Divider, Icon, Result } from \"antd\";\r\nimport { getUser } from \"../../services/auth\";\r\n\r\nexport default function User() {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n\r\n    function refetch() {\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n    if (getUser(\"role\") === \"MOD\") {\r\n        return (\r\n            <Result\r\n                status=\"403\"\r\n                title=\"403\"\r\n                subTitle=\"Sorry, you are not authorized to access this page.\"\r\n            />\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"user\" /> User\r\n                </h1>\r\n            </Divider>\r\n\r\n            <UserAddBtn refetch={refetch} />\r\n            <UserDeleteBtn gridApi={gridApi} refetch={refetch} />\r\n            <UserEditBtn gridApi={gridApi} refetch={refetch} />\r\n            <UserGrid setGridApi={setGridApi} doRefetch={doRefetch} />\r\n        </div>\r\n    );\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_SHOPS= gql`\r\n    query{\r\n        shops{\r\n            _id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_SHOPS_DISHES = gql`\r\n    query{\r\n        shops{\r\n            _id\r\n            name\r\n            items\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_SHOP = gql`\r\n    mutation AddShop($name: String!){\r\n        addShop(name: $name){\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SHOP = gql`\r\n    mutation UpdateShop($id: String!, $name: String!){\r\n        updateShop(id: $id, name: $name){\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SHOP = gql`\r\n    mutation DeleteShop($id: String!){\r\n        deleteShop(id: $id){\r\n            name\r\n        }\r\n    }\r\n`;","import React, { useEffect } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { GET_SHOPS } from \"../../../graphql/shop\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\n\r\nexport default function ShopGrid({ setGridApi, doRefetch, handleClick}) {\r\n    const columnDefs = [\r\n        {\r\n            checkboxSelection: true,\r\n            width: 30\r\n        },\r\n        { headerName: \"Name\", field: \"name\", sortable: true }\r\n    ];\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_SHOPS);\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch]);\r\n    \r\n    const props = {\r\n        columnDefs,\r\n        data,\r\n        setGridApi,\r\n        loading,\r\n        error,\r\n        onRowClicked: handleClick\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid {...props} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_SHOP } from \"../../../graphql/shop\";\r\nimport DeleteBtn from \"../custom/DeleteBtn\";\r\n\r\nexport default function ShopDeleteBtn({ refetch, gridApi, setCurShop }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteShop, { data }] = useMutation(DELETE_SHOP);\r\n\r\n    function handleDelete() {\r\n        const selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteShop({ variables: { id } });\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Shop!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setCurShop(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Shop? This action will delete all dishes of this Shop!\",\r\n        btnName: \"Delete Shop\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React from 'react'\r\nimport { Button,Modal } from \"antd\";\r\n\r\nexport default function EditBtn(props) {\r\n    return (\r\n        <div className=\"user-btn\">\r\n            <Button type=\"ghost\" onClick={props.handleEdit}>\r\n                {props.btnName}\r\n            </Button>\r\n            <Modal\r\n                title={props.btnName}\r\n                visible={props.visible}\r\n                onOk={props.handleOk}\r\n                confirmLoading={props.confirmLoading}\r\n                onCancel={() => props.setVisible(false)}\r\n            >\r\n                {props.children}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {Form, Input,message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport EditBtn from \"../custom/EditBtn\";\r\nimport { UPDATE_SHOP } from \"../../../graphql/shop\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\n\r\nexport default function ShopEditBtn({gridApi, refetch}) {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [updateShop, { data }] = useMutation(UPDATE_SHOP);\r\n    const [id, setId] = useState(\"\");\r\n    function handleOk() {\r\n        const {isValid, error} = checkEmpty({name});\r\n\r\n        if(!isValid){\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true); \r\n\r\n        updateShop({\r\n            variables: {\r\n                id,\r\n                name\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        let selected = gridApi.getSelectedRows();\r\n    \r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n            setName(selected[\"name\"]);\r\n            setId(selected[\"_id\"]);\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a User!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        handleEdit,\r\n        handleOk,\r\n        confirmLoading,\r\n        setVisible,\r\n        btnName: \"Edit Shop\"\r\n    }\r\n\r\n    return (\r\n        <EditBtn {...props}>\r\n            <form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Shop name...\"\r\n                    />\r\n                </Form.Item>\r\n            </form>\r\n        </EditBtn>\r\n    );\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_DISHES = gql`\r\n    query Dishes($shop: String) {\r\n        dishes(shop: $shop){\r\n            _id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_DISH = gql`\r\n    mutation DeleteDish($id: String!){\r\n        deleteDish(id: $id){\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_DISH = gql`\r\n    mutation AddDish($shop: String!, $name: String!){\r\n        addDish(shop: $shop, name: $name){\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_DISH = gql`\r\n    mutation UpdateDish($id: String!, $name: String!){\r\n        updateDish(id: $id, name: $name){\r\n            name\r\n        }\r\n    }\r\n`;","import React, { useEffect, useState } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport { GET_DISHES } from '../../../graphql/dish';\r\n\r\nexport default function DishGrid({curShop, setGridApi, doRefetch, multiple, parentDef}) {\r\n   \r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 30},\r\n        { headerName: \"Name\", field: \"name\", sortable: true },\r\n    ];\r\n    \r\n    const { data, loading, error, refetch} = useQuery(GET_DISHES, {variables: {shop: curShop}});\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch, curShop]);\r\n    \r\n    const props = {\r\n        setGridApi,\r\n        columnDefs: parentDef || columnDefs,\r\n        data,\r\n        loading,\r\n        error,\r\n        multiple\r\n    }\r\n\r\n    return (\r\n        <Grid {...props}/>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_DISH } from '../../../graphql/dish';\r\n\r\nexport default function DishAddBtn({refetch, curShop}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [addDish, { data }] = useMutation(ADD_DISH);\r\n\r\n    function showModal() {\r\n        if(!curShop){\r\n            message.error(\"Must choose a Shop\");\r\n            return;\r\n        }\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        addDish({\r\n            variables: {\r\n                name,\r\n                shop: curShop\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Dish\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n    return (\r\n        <AddBtn {...props}>\r\n        <Form>\r\n            <Form.Item>\r\n                <Input\r\n                    type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    value={name}\r\n                    placeholder=\"Dish name...\"\r\n                />\r\n            </Form.Item>\r\n        </Form>\r\n    </AddBtn>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport DeleteBtn from \"../custom/DeleteBtn\";\r\nimport { DELETE_DISH } from \"../../../graphql/dish\";\r\n\r\nexport default function DishDeleteBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteSite, { data }] = useMutation(DELETE_DISH);\r\n\r\n    function handleDelete() {\r\n        const selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteSite({ variables: { id } });\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose a Dish!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Dish?\",\r\n        btnName: \"Delete Dish\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport EditBtn from \"../custom/EditBtn\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport { UPDATE_DISH } from \"../../../graphql/dish\";\r\n\r\nexport default function DishEditBtn({ gridApi, refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [updateDish, { data }] = useMutation(UPDATE_DISH);\r\n    const [id, setId] = useState(\"\");\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        updateDish({\r\n            variables: {\r\n                id,\r\n                name\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        let selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n            setName(selected[\"name\"]);\r\n            setId(selected[\"_id\"]);\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Dish!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        handleEdit,\r\n        handleOk,\r\n        confirmLoading,\r\n        setVisible,\r\n        btnName: \"Edit Dish\"\r\n    };\r\n\r\n    return (\r\n        <EditBtn {...props}>\r\n            <form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Dish name...\"\r\n                    />\r\n                </Form.Item>\r\n            </form>\r\n        </EditBtn>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport DishGrid from \"./dish/DishGrid\"\r\nimport DishAddBtn from './dish/DishAddBtn';\r\nimport DishDeleteBtn from './dish/DishDeleteBtn';\r\nimport DishEditBtn from './dish/DishEditBtn';\r\n\r\nexport default function Dish({curShop}) {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n\r\n    function refetch(){\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DishAddBtn curShop={curShop} refetch={refetch}/>\r\n            <DishDeleteBtn gridApi={gridApi} refetch={refetch}/>\r\n            <DishEditBtn gridApi={gridApi} refetch={refetch}/>\r\n            <DishGrid curShop={curShop} setGridApi={setGridApi} doRefetch={doRefetch}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_SHOP } from \"../../../graphql/shop\";\r\n\r\nexport default function ShopAddBtn({ refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [addSite, { data }] = useMutation(ADD_SHOP);\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        addSite({\r\n            variables: {\r\n                name\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Shop\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n   \r\n    return (\r\n        <AddBtn {...props}>\r\n            <Form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Shop name...\"\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Divider, Icon, Row, Col, Result } from \"antd\";\r\nimport ShopGrid from \"./shop/ShopGrid\";\r\nimport ShopDeleteBtn from \"./shop/ShopDeleteBtn\";\r\nimport ShopEditBtn from \"./shop/ShopEditBtn\";\r\nimport Dish from \"./Dish\";\r\nimport ShopAddBtn from \"./shop/ShopAddBtn\";\r\nimport { getUser } from \"../../services/auth\";\r\n\r\nexport default function Shop() {\r\n    \r\n    const [shopApi, setShopApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n    const [curShop, setCurShop] = useState(\"\");\r\n\r\n    function shopRefetch() {\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n\r\n    function handleShopClick() {\r\n        let selected = shopApi.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n            setCurShop(selected[0][\"_id\"]);\r\n        } else {\r\n            setCurShop(\"\");\r\n        }\r\n    }\r\n\r\n    if (getUser(\"role\") === \"MOD\") {\r\n        return (\r\n            <Result\r\n                status=\"403\"\r\n                title=\"403\"\r\n                subTitle=\"Sorry, you are not authorized to access this page.\"\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"shop\" /> Shop\r\n                </h1>\r\n            </Divider>\r\n            <Row>\r\n                <Col span={11}>\r\n                    <ShopAddBtn refetch={shopRefetch} />\r\n                    <ShopDeleteBtn setCurShop={setCurShop} gridApi={shopApi} refetch={shopRefetch} />\r\n                    <ShopEditBtn gridApi={shopApi} refetch={shopRefetch} />\r\n                    <ShopGrid\r\n                        handleClick={handleShopClick}\r\n                        setGridApi={setShopApi}\r\n                        doRefetch={doRefetch}\r\n                    />\r\n                </Col>\r\n                <Col span={11} offset={2}>\r\n                    <Dish curShop={curShop} />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { GET_ORDERS } from \"../../../graphql/order\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nexport default function OrderGrid({ setGridApi, doRefetch}) {\r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 60},\r\n        { headerName: \"User\", field: \"user\"},\r\n        { headerName: \"Item\", field: \"item\" },\r\n        { headerName: \"Site\", field: \"site\", rowGroup: true },\r\n        { headerName: \"Confirm\", field: \"confirmed\", width:100 },\r\n        { headerName: \"Quantity\", field: \"quantity\", width:100},\r\n        { headerName: \"Note\", field: \"note\", width: 100 },\r\n        { headerName: \"Booked Date\", field: \"created_date\",rowGroup: true, width:120},\r\n    ];\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_ORDERS);\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch]);\r\n    \r\n    const props = {\r\n        setGridApi,\r\n        loading,\r\n        error,\r\n        columnDefs,\r\n        data,\r\n        pagination: false\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid {...props}/>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport DeleteBtn from \"../custom/DeleteBtn\";\r\nimport { DELETE_ORDER } from \"../../../graphql/order\";\r\nimport { getUser } from \"../../../services/auth\";\r\n\r\nexport default function OrderDeleteBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteOrder, { data }] = useMutation(DELETE_ORDER);\r\n\r\n    function handleDelete() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n        \r\n        const selected = gridApi.getSelectedRows();\r\n        \r\n        if (selected.length > 0) {\r\n            const { _id: id } = selected[0];\r\n            deleteOrder({ variables: { id } });\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Order!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Order?\",\r\n        btnName: \"Delete Order\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Divider, Icon } from \"antd\";\r\nimport OrderGrid from \"./order/OrderGrid\";\r\nimport OrderDeleteBtn from \"./order/OrderDeleteBtn\";\r\n\r\nexport default function Order() {\r\n    const [gridApi, setOrderApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n\r\n    function orderRefetch() {\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"order\" /> Order\r\n                </h1>\r\n            </Divider>\r\n\r\n            <OrderDeleteBtn gridApi={gridApi} refetch={orderRefetch} />\r\n            <OrderGrid setGridApi={setOrderApi} doRefetch={doRefetch} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { GET_MENUS } from \"../../../graphql/menu\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Icon } from \"antd\";\r\n\r\nexport default function MenuGrid({ setGridApi, doRefetch, handleClick, site}) {\r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 60},\r\n        { headerName: \"Name\", field: \"name\",suppressSizeToFit: true },\r\n        { headerName: \"Status\", field: \"status\" },\r\n        { headerName: \"Created\", field: \"created_date\"},\r\n    ];\r\n\r\n    const { data, loading, error, refetch } = useQuery(GET_MENUS, {variables: {site}} );\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch, site]);\r\n    \r\n    const props = {\r\n        setGridApi,\r\n        loading,\r\n        error,\r\n        columnDefs,\r\n        data,\r\n        onRowClicked: handleClick,\r\n        pagination: false\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid {...props}/>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_MENU } from \"../../../graphql/menu\";\r\nimport DeleteBtn from \"../custom/DeleteBtn\";\r\nimport {getUser} from \"../../../services/auth\";\r\n\r\nexport default function MenuDeleteBtn({ refetch, gridApi, setCurMenu }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteMenu, { data }] = useMutation(DELETE_MENU);\r\n\r\n    function handleDelete() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n        const selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n\r\n            if(selected[0]['status'] !== \"UNPUBLISHED\"){\r\n                message.error(\"Can not delete Menu after it is published\");\r\n                return;\r\n            }\r\n            \r\n            const { _id: id } = selected[0];\r\n            deleteMenu({ variables: { id } });\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Menu!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setCurMenu(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Menu? This action will delete all items of this Menu!\",\r\n        btnName: \"Delete Menu\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {Form, Input,message, Select } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport EditBtn from \"../custom/EditBtn\";\r\nimport { UPDATE_MENU } from \"../../../graphql/menu\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport { checkMenuStatus } from \"../../../services/menu\";\r\nconst {Option} = Select;\r\nexport default function MenuEditBtn({gridApi, refetch}) {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [status, setStatus] = useState(\"UNPUBLISHED\");\r\n    const [updateMenu, { data }] = useMutation(UPDATE_MENU);\r\n    const [id, setId] = useState(\"\");\r\n\r\n    function handleOk() {\r\n        const {isValid, error} = checkEmpty({name});\r\n\r\n        if(!isValid){\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true); \r\n\r\n        updateMenu({\r\n            variables: {\r\n                id,\r\n                name,\r\n                status\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        let selected = gridApi.getSelectedRows();\r\n\r\n        \r\n\r\n        if (selected.length > 0) {\r\n\r\n            selected = selected[0];\r\n\r\n            if(selected['status'] === \"BLOCKED\"){\r\n                message.error(\"Can not change Blocked Menu\");\r\n                return;\r\n            }\r\n\r\n            setName(selected[\"name\"]);\r\n            setId(selected[\"_id\"]);\r\n            setStatus(selected[\"status\"])\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose a Menu!\");\r\n        }\r\n    }\r\n\r\n    function handleChange(curStatus){\r\n        const statusCheck = checkMenuStatus(curStatus, status, gridApi);\r\n\r\n        if(!statusCheck.isValid){\r\n            message.error(statusCheck.error);\r\n            return;\r\n        }\r\n\r\n        setStatus(curStatus);\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setName(\"\");\r\n        setStatus(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        handleEdit,\r\n        handleOk,\r\n        confirmLoading,\r\n        setVisible,\r\n        btnName: \"Edit Menu\"\r\n    }\r\n\r\n    return (\r\n        <EditBtn {...props}>\r\n            <form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Menu name...\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Select\r\n                        value={status}\r\n                        onChange={handleChange}\r\n                    >\r\n                        <Option value=\"UNPUBLISHED\">UnPublished</Option>\r\n                        <Option value=\"PUBLISHED\">Published</Option>\r\n                        <Option value=\"CLOSED\">Closed</Option>\r\n                        <Option value=\"BLOCKED\">BLOCKED</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            </form>\r\n        </EditBtn>\r\n    );\r\n}\r\n","\r\nexport function checkMenuStatus(curStatus, prevStatus, gridApi){\r\n    const nodes = gridApi.getRenderedNodes();\r\n    const rowStatus = nodes.map(node => node.data.status);\r\n    \r\n    if(prevStatus !== curStatus){\r\n        if(prevStatus === \"BLOCKED\")\r\n            return {isValid: false, error: \"Menu is BLOCKED!\"}\r\n        if(curStatus === \"PUBLISHED\" && rowStatus.includes(\"PUBLISHED\"))\r\n            return {isValid: false, error: \"Only one Menu got published at a time!\"}\r\n        if(curStatus === \"UNPUBLISHED\")\r\n            return {isValid: false, error: \"Can not unPublish Menu\"}\r\n    }\r\n    return {isValid: true}\r\n}   ","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_ITEMES = gql`\r\n    query Itemes($menu: String) {\r\n        items(menu: $menu){\r\n            _id\r\n            name\r\n            shop\r\n            total\r\n            booked\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ITEM = gql`\r\n    mutation DeleteItem($id: String!){\r\n        deleteItem(id: $id){\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_ITEM = gql`\r\n    mutation AddItem($menu: String!, $name: String!, $total: Int!){\r\n        addItem(menu: $menu, name: $name, total: $total){\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ADD_ITEMS_SHOP = gql`\r\n    mutation AddItemFromShop($menu: String!, $shop: String!, $items: String!, $total: Int!){\r\n        addItemFromShop(menu: $menu, shop: $shop, items: $items, total: $total)\r\n    }\r\n`\r\n\r\nexport const UPDATE_ITEM = gql`\r\n    mutation UpdateItem($id: String!, $name: String!, $total: Int!){\r\n        updateItem(id: $id, name: $name, total: $total)\r\n    }\r\n`;","import React, { useEffect } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport { GET_ITEMES } from '../../../graphql/item';\r\n\r\nexport default function ItemGrid({curMenu, setGridApi, doRefetch}) {\r\n    const columnDefs = [\r\n        {checkboxSelection: true,width: 80},\r\n        { headerName: \"Name\", field: \"name\"},\r\n        { headerName: \"Currently Booked\", field: \"booked\"},\r\n        { headerName: \"Total\", field: \"total\"},\r\n        { headerName: \"Cancelled\", field: \"cancelled\"},\r\n        { headerName: \"Shop\", field: \"shop\"},\r\n    ];\r\n    \r\n    const { data, loading, error, refetch} = useQuery(GET_ITEMES, {variables: {menu: curMenu}});\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [doRefetch, curMenu]);\r\n\r\n    const props = {\r\n        setGridApi,\r\n        columnDefs,\r\n        data,\r\n        loading,\r\n        error\r\n    }\r\n\r\n    return (\r\n        <Grid {...props}/>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message, InputNumber } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_ITEM } from \"../../../graphql/item\";\r\nimport {getUser} from \"../../../services/auth\";\r\n\r\nexport default function ItemAddBtn({ refetch, curMenu }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [total, setTotal] = useState(1);\r\n    const [addItem, { data }] = useMutation(ADD_ITEM);\r\n\r\n    function showModal() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        if (!curMenu) {\r\n            message.error(\"Must choose a Menu\");\r\n            return;\r\n        }\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        addItem({\r\n            variables: {\r\n                name,\r\n                menu: curMenu,\r\n                total,\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Item\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n    return (\r\n        <AddBtn {...props}>\r\n            <Form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Item name...\"\r\n                    />\r\n\r\n                    <InputNumber\r\n                        min={1}\r\n                        defaultValue={total}\r\n                        type=\"text\"\r\n                        onChange={value => setTotal(value)}\r\n                        placeholder=\"Total...\"\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport DeleteBtn from \"../custom/DeleteBtn\";\r\nimport { DELETE_ITEM } from \"../../../graphql/item\";\r\nimport {getUser} from \"../../../services/auth\";\r\nexport default function ItemDeleteBtn({gridApi, refetch}) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [deleteItem, { data }] = useMutation(DELETE_ITEM);\r\n\r\n    function handleDelete() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        const selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n\r\n            if(selected[0]['booked'] > 0){\r\n                message.error(\"Can not delete Item when it is booked!\");\r\n                return;\r\n            }\r\n            \r\n            const { _id: id } = selected[0];\r\n            deleteItem({ variables: { id } });\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Item!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        confirmTitle:\"Are you sure delete this Item?\",\r\n        btnName: \"Delete Item\",\r\n        handleDelete\r\n    };\r\n    return <DeleteBtn {...props} />;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message, InputNumber } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport EditBtn from \"../custom/EditBtn\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport { UPDATE_ITEM } from \"../../../graphql/item\";\r\nimport {getUser} from \"../../../services/auth\";\r\nexport default function ItemEditBtn({ gridApi, refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [total, setTotal] = useState(1);\r\n    const [booked, setBooked] = useState(0);\r\n    const [updateItem, { data }] = useMutation(UPDATE_ITEM);\r\n    const [id, setId] = useState(\"\");\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        if(total < booked){\r\n            message.error(\"Amount of Total is less than Booked!\");\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        updateItem({\r\n            variables: {\r\n                id,\r\n                name,\r\n                total\r\n            }\r\n        });\r\n    }\r\n\r\n    function handleEdit() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        let selected = gridApi.getSelectedRows();\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n            setName(selected[\"name\"]);\r\n            setTotal(selected[\"total\"]);\r\n            setId(selected[\"_id\"]);\r\n            setBooked(selected[\"booked\"]);\r\n            setVisible(true);\r\n        } else {\r\n            message.error(\"Must choose an Item!\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setVisible(false);\r\n        setConfirmLoading(false);\r\n        setName(\"\");\r\n        setBooked(0);\r\n        setTotal(1);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        visible,\r\n        handleEdit,\r\n        handleOk,\r\n        confirmLoading,\r\n        setVisible,\r\n        btnName: \"Edit Item\"\r\n    };\r\n\r\n    return (\r\n        <EditBtn {...props}>\r\n            <form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Item name...\"\r\n                    />\r\n                    <InputNumber\r\n                        min={1}\r\n                        value={total}\r\n                        type=\"text\"\r\n                        onChange={value => setTotal(value)}\r\n                        placeholder=\"Total...\"\r\n                    />\r\n                </Form.Item>\r\n            </form>\r\n        </EditBtn>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { Select, Icon } from 'antd'\r\nimport { useQuery } from '@apollo/client';\r\nimport {GET_SHOPS} from \"../../../graphql/shop\";\r\nconst { Option } = Select;\r\n\r\nexport default function ShopOption({setShop, shop}) {\r\n    const { loading, error, data } = useQuery(GET_SHOPS);\r\n    \r\n    function renderOption(data) {\r\n        return data.shops.map(shop => (\r\n            <Option key={shop[\"_id\"]} value={shop[\"_id\"]}>{shop[\"name\"]}</Option>\r\n        ));\r\n    }\r\n\r\n    if (loading)\r\n        return (\r\n            <div>\r\n                <Select\r\n                    name=\"site\"\r\n                    placeholder=\"Choose Shop...\"\r\n                    suffixIcon={<Icon type=\"loading\" />}\r\n                    style={{width: '100%'}}\r\n                ></Select>\r\n            </div>\r\n        );\r\n\r\n    if (error) console.error(error);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Select\r\n                placeholder=\"Choose Shop...\"\r\n                onChange={value => setShop(value)}\r\n                value={shop || undefined}\r\n                style={{width: '100%'}}\r\n            >\r\n                 {renderOption(data)}\r\n            </Select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_ITEMS_SHOP } from \"../../../graphql/item\";\r\nimport ShopOption from \"./ShopOption\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { message, InputNumber, Alert } from \"antd\";\r\nimport DishGrid from \"../dish/DishGrid\";\r\nimport {getUser} from \"../../../services/auth\";\r\nexport default function ItemAddFromShop({ refetch, curMenu }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [shop, setShop] = useState(\"\");\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [total, setTotal] = useState(1);\r\n    const [addItem, { data }] = useMutation(ADD_ITEMS_SHOP);\r\n\r\n    function showModal() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        if (!curMenu) {\r\n            message.error(\"Must choose a Menu\");\r\n            return;\r\n        }\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        setConfirmLoading(true);\r\n\r\n        const selected = gridApi.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n\r\n            addItem({\r\n                variables: {\r\n                    menu: curMenu,\r\n                    shop,\r\n                    items: JSON.stringify(selected),\r\n                    total\r\n                }\r\n            });\r\n        } else {\r\n            message.error(\"Must choose a Dish!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        visible,\r\n        handleOk,\r\n        confirmLoading,\r\n        handleCancel,\r\n        btnName: \"Add From Shop\"\r\n    };\r\n    return (\r\n        <AddBtn {...props}>\r\n            <ShopOption setShop={setShop} shop={shop} />\r\n            \r\n            <div style={{ margin: \"15px 0\" }}></div>\r\n\r\n            <Alert message=\"You can choose many Dishes at once by pressing Ctrl + Click\" type=\"info\" showIcon />\r\n\r\n            <div style={{ margin: \"15px 0\" }}></div>\r\n\r\n            <DishGrid curShop={shop} setGridApi={setGridApi} multiple={true} />\r\n\r\n            <div style={{ margin: \"15px 0\" }}></div>\r\n\r\n            <b>Default Total: </b>\r\n            <InputNumber\r\n                min={1}\r\n                value={total}\r\n                onChange={value => setTotal(value)}\r\n                placeholder=\"Default Total...\"\r\n            />\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Upload, Icon, message } from 'antd';\r\nimport {getToken} from \"../../../services/auth\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport {getUser} from \"../../../services/auth\";\r\nconst { Dragger } = Upload;\r\n\r\nexport default function ItemAddFromExcel({ curMenu, refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    function showModal() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        if (!curMenu) {\r\n            message.error(\"Must choose a Menu\");\r\n            return;\r\n        }\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        message.error(\"Must choose a file!\");\r\n    }\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add From Excel\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n    const uploadProps = {\r\n        name: 'file',\r\n        action: `${process.env.REACT_APP_SERVER || \"http://localhost:3001\"}/item/uploadexcel?menu=${curMenu}`,\r\n        name:\"file\",\r\n        headers: {\r\n            authorization: getToken()\r\n        }, \r\n        accept:\".xlsx\",\r\n        onChange(info) {\r\n          const { status } = info.file;\r\n          if (status !== 'uploading') {\r\n            console.log(info.file, info.fileList);\r\n          }\r\n          if (status === 'done') {\r\n            message.success(`${info.file.name} file uploaded successfully.`);\r\n            refetch();\r\n            setConfirmLoading(false);\r\n            setVisible(false);\r\n\r\n          } else if (status === 'error') {\r\n            message.error(`${info.file.name} file upload failed.`);\r\n          }\r\n        },\r\n      };\r\n    return (\r\n        <AddBtn {...props}>\r\n            <Dragger {...uploadProps}>\r\n                <p className=\"ant-upload-drag-icon\">\r\n                    <Icon type=\"inbox\" />\r\n                </p>\r\n                <p className=\"ant-upload-text\">\r\n                    Click or drag file to this area to upload.\r\n                </p>\r\n                <p className=\"ant-upload-hint\">\r\n                    Only support .xlsx file!\r\n                </p>\r\n            </Dragger>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Grid from \"../custom/Grid\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_USER } from \"../../../graphql/user\";\r\n\r\nexport default function UserOption({ setUserId, curSite }) {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n\r\n    const { data, loading, error } = useQuery(GET_USER, {\r\n        variables: {\r\n            site: curSite\r\n        }\r\n    });\r\n\r\n    const columnDefs = [\r\n        { checkboxSelection: true, width: 80 },\r\n        { headerName: \"Name\", field: \"name\" },\r\n        {\r\n            headerName: \"Site\",\r\n            suppressSizeToFit: true,\r\n            valueGetter: param => param.data.site.name\r\n        },\r\n        { headerName: \"Role\", field: \"role\" },\r\n        { headerName: \"Status\", field: \"status\" }\r\n    ];\r\n\r\n    function onRowClicked() {\r\n        const selected = gridApi.getSelectedRows();\r\n        if(selected.length > 0){\r\n            const { _id: id } = selected[0];\r\n            setUserId(id);\r\n        }\r\n        else\r\n            setUserId(\"\");\r\n        \r\n    }\r\n\r\n    const props = {\r\n        onRowClicked,\r\n        data,\r\n        loading,\r\n        error,\r\n        columnDefs,\r\n        setGridApi,\r\n        height: \"200px\"\r\n    };\r\n    return <Grid {...props} />;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, message, InputNumber, Input } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_ORDER } from \"../../../graphql/order\";\r\nimport UserSearch from \"./UserOption\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport {getUser} from \"../../../services/auth\";\r\n\r\nexport default function OrderAddBtn({ gridApi, curSite, refetch }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n    const [user, setUser] = useState(\"\");\r\n    const [item, setItem] = useState(\"\");\r\n    const [note, setNote] = useState(\"\");\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [remaining, setRemaining] = useState(0);\r\n\r\n    const [addOrder, { data }] = useMutation(ADD_ORDER);\r\n    \r\n    function showModal() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n        \r\n        let selected = gridApi.getSelectedRows();\r\n\r\n        if (selected.length > 0) {\r\n            selected = selected[0];\r\n\r\n            if (selected[\"total\"] - selected[\"booked\"] <= 0) {\r\n                message.error(\"Item out of stock!\");\r\n                return;\r\n            }\r\n\r\n            setItem(selected[\"_id\"]);\r\n            setRemaining(selected[\"total\"] - selected[\"booked\"]);\r\n            setVisible(true); //Show modal\r\n        } else {\r\n            message.error(\"Must choose an Item!\");\r\n        }\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid} = checkEmpty({ user });\r\n\r\n        if (!isValid) {\r\n            message.error(\"Must choose a User\");\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n        \r\n        addOrder({\r\n            variables: {\r\n                user,\r\n                quantity,\r\n                item,\r\n                note\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setQuantity(1);\r\n        setNote(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Order\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n    return (\r\n        <AddBtn {...props}>\r\n            <Form>\r\n                <b>Choose User:</b>\r\n                <UserSearch setUserId={setUser} curSite={curSite} />\r\n                <div style={{ margin: \"10px 0\" }}></div>\r\n                <b>Quantity: </b>\r\n                <InputNumber\r\n                    min={1}\r\n                    max={remaining}\r\n                    value={quantity}\r\n                    onChange={value => setQuantity(value)}\r\n                    placeholder=\"Quantity...\"\r\n                />\r\n                <div style={{ margin: \"10px 0\" }}></div>\r\n                <Input\r\n                    type=\"text\"\r\n                    onChange={e => setNote(e.target.value)}\r\n                    value={note}\r\n                    placeholder=\"Note...\"\r\n                />\r\n            </Form>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport ItemGrid from \"./item/ItemGrid\"\r\nimport ItemAddBtn from './item/ItemAddBtn';\r\nimport ItemDeleteBtn from './item/ItemDeleteBtn';\r\nimport ItemEditBtn from './item/ItemEditBtn';\r\nimport ItemAddFromShop from './item/ItemAddFromShop';\r\nimport ItemAddFromExcel from './item/ItemAddFromExcel';\r\nimport OrderAddBtn from './order/OrderAddBtn';\r\nimport { message } from 'antd';\r\n\r\n\r\nexport default function Item({curMenu,curSite,menuState}) {\r\n    const [gridApi, setGridApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n\r\n    function refetch(){\r\n        setDoRefetch(!doRefetch);\r\n    }\r\n   \r\n    function handleClick(e){\r\n        const isBlock = e.target.classList.contains(\"unclickable\");\r\n        if(isBlock)\r\n            message.error(\"Can not change Items of Blocked or Published Menu\")\r\n    }\r\n\r\n    return (\r\n        <div  style={{marginTop: \"-5px\"}} >\r\n            <div onClick={handleClick} className={menuState === \"BLOCKED\" || menuState === \"PUBLISHED\" ? \"unclickable\" : \"\"}>\r\n                <ItemAddBtn curMenu={curMenu} refetch={refetch}/>\r\n                <ItemAddFromShop curMenu={curMenu} refetch={refetch}/>\r\n                <ItemAddFromExcel curMenu={curMenu} refetch={refetch}/>\r\n                <OrderAddBtn gridApi={gridApi} curSite={curSite} refetch={refetch}/>\r\n                <ItemDeleteBtn gridApi={gridApi} refetch={refetch}/>\r\n                <ItemEditBtn gridApi={gridApi} refetch={refetch}/>\r\n            </div>\r\n            \r\n            <ItemGrid curMenu={curMenu} setGridApi={setGridApi} doRefetch={doRefetch}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, message, Select } from \"antd\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { checkEmpty } from \"../../../services/user\";\r\nimport AddBtn from \"../custom/AddBtn\";\r\nimport { ADD_MENU } from \"../../../graphql/menu\";\r\nimport {getUser} from \"../../../services/auth\";\r\nconst {Option} = Select;\r\n\r\nexport default function MenuAddBtn({ refetch, site }) {\r\n    const [visible, setVisible] = useState(false);\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [status, setStatus] = useState(\"UNPUBLISHED\");\r\n    const [addMenu, { data }] = useMutation(ADD_MENU);\r\n\r\n    function showModal() {\r\n        if (getUser(\"role\") === \"MOD\") {\r\n            message.error(\"Sorry, you are not authorized to do this action\")\r\n            return;\r\n        }\r\n\r\n        if (site === \"\") {\r\n            message.error(\"Must choose a Site!\");\r\n            return;\r\n        }\r\n        const dateString = new Date().toDateString();\r\n        setName(`Menu ${ dateString }`); //Set default menu name\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function handleOk() {\r\n        const { isValid, error } = checkEmpty({ name });\r\n\r\n        if (!isValid) {\r\n            message.error(error);\r\n            return;\r\n        }\r\n\r\n        setConfirmLoading(true);\r\n\r\n        addMenu({\r\n            variables: {\r\n                name,\r\n                site,\r\n                status\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n        setConfirmLoading(false);\r\n        setVisible(false);\r\n        setName(\"\");\r\n    }, [data]);\r\n\r\n    const props = {\r\n        showModal,\r\n        handleCancel,\r\n        handleOk,\r\n        btnName: \"Add Menu\",\r\n        visible,\r\n        confirmLoading\r\n    };\r\n\r\n    return (\r\n        <AddBtn {...props}>\r\n            <Form>\r\n                <Form.Item>\r\n                    <Input\r\n                        type=\"text\"\r\n                        onChange={e => setName(e.target.value)}\r\n                        value={name}\r\n                        placeholder=\"Menu name...\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item>\r\n                    <Select\r\n                        value={status}\r\n                        onChange={value => setStatus(value)}\r\n                    >\r\n                        <Option value=\"UNPUBLISHED\">UnPublished</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </AddBtn>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Select, Icon } from \"antd\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_SITES } from \"../../../graphql/site\";\r\nconst { Option } = Select;\r\n\r\nexport default function MenuSite(props) {\r\n    const { loading, error, data } = useQuery(GET_SITES);\r\n\r\n    function renderOption(data) {\r\n        return data.sites.map(site => (\r\n            <Option key={site[\"_id\"]} value={site[\"_id\"]}>{site[\"name\"]}</Option>\r\n        ));\r\n    }\r\n\r\n    \r\n    if (loading)\r\n        return (\r\n            <div>\r\n                <Select\r\n                    name=\"site\"\r\n                    placeholder=\"Choose site...\"\r\n                    suffixIcon={<Icon type=\"loading\" />}\r\n                    style={{width: '100%'}}\r\n                ></Select>\r\n            </div>\r\n        );\r\n\r\n    if (error) console.error(error);\r\n    \r\n    return (\r\n        <div>\r\n            <Select\r\n                onChange={value => props.setSite(value)}\r\n                placeholder=\"Choose site...\"\r\n                value={props.site || undefined}\r\n                style={{width: '100%', marginBottom: \"5px\"}}\r\n            >\r\n                {renderOption(data)}\r\n            </Select>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Alert } from \"antd\";\r\n\r\nexport default function MenuInfo() {\r\n    return (\r\n        <div style={{ marginTop: \"20px\" }}>\r\n            <Alert\r\n                style={{margin: '10px 0'}}\r\n                message=\"Only one Menu got Published at a time!\"\r\n                type=\"warning\"\r\n                showIcon\r\n            />\r\n            <Alert\r\n                style={{margin: '10px 0'}}\r\n                message=\"If Menu is CLOSED, only USER can not order!\"\r\n                type=\"warning\"\r\n                showIcon\r\n            />\r\n            <Alert\r\n                style={{margin: '10px 0'}}\r\n                message=\"If Menu is BLOCKED, both ADMIN and MOD can not edit MENU or make orders\"\r\n                type=\"warning\"\r\n                showIcon\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Divider, Icon, Row, Col, Form, Alert } from \"antd\";\r\nimport MenuGrid from \"./menu/MenuGrid\";\r\nimport MenuDeleteBtn from \"./menu/MenuDeleteBtn\";\r\nimport MenuEditBtn from \"./menu/MenuEditBtn\";\r\nimport Item from \"./Item\";\r\nimport MenuAddBtn from \"./menu/MenuAddBtn\";\r\nimport MenuSite from \"./menu/MenuSite\";\r\nimport MenuInfo from \"./menu/MenuInfo\";\r\n\r\nexport default function Menu() {\r\n    const [gridApi, setMenuApi] = useState(undefined);\r\n    const [doRefetch, setDoRefetch] = useState(true);\r\n    const [curMenu, setCurMenu] = useState(\"\");\r\n    const [menuState, setMenuState] = useState(\"\");\r\n    const [site, setSite] = useState(\"\");\r\n\r\n    function menuRefetch() {\r\n        setDoRefetch(!doRefetch);\r\n        setCurMenu(\"\");\r\n        setMenuState(\"\");\r\n    }\r\n\r\n    function handleMenuClick() {\r\n        let selected = gridApi.getSelectedRows();\r\n        \r\n        if (selected.length > 0) {\r\n            setCurMenu(selected[0]['_id']);\r\n            setMenuState(selected[0]['status']);\r\n        } else {\r\n            setCurMenu(\"\");\r\n            setMenuState(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"menu\" /> Menu\r\n                </h1>\r\n            </Divider>\r\n            <Row>\r\n                <Col span={11}>\r\n                    <MenuSite site={site} setSite={setSite} />\r\n                    <MenuAddBtn gridApi={gridApi} site={site} refetch={menuRefetch} />\r\n                    <MenuDeleteBtn\r\n                        setCurMenu={setCurMenu}\r\n                        gridApi={gridApi}\r\n                        refetch={menuRefetch}\r\n                    />\r\n                    <MenuEditBtn gridApi={gridApi} refetch={menuRefetch} />\r\n                    <MenuGrid\r\n                        handleClick={handleMenuClick}\r\n                        setGridApi={setMenuApi}\r\n                        doRefetch={doRefetch}\r\n                        site={site}\r\n                    />\r\n                    <MenuInfo/>\r\n                </Col>\r\n                <Col span={11} offset={2}>\r\n                    <Item curMenu={curMenu} menuState={menuState} curSite={site}/>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n","import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_CONFIG = gql`\r\n    query{\r\n        config{\r\n            closeOrder\r\n            closeConfirm\r\n            startConfirm\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_CONFIG = gql`\r\n    mutation Update($order: String, $closeConfirm: String, $startConfirm: String){\r\n        updateConfig(order:$order, closeConfirm: $closeConfirm, startConfirm: $startConfirm){\r\n            closeOrder\r\n            closeConfirm\r\n            startConfirm\r\n        }\r\n    }\r\n`","import React, { useState, useEffect } from \"react\";\r\nimport { Icon, Divider, Button, Row, Col, message, Result } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { GET_CONFIG, UPDATE_CONFIG } from \"../../graphql/config\";\r\nimport TimeKeeper from \"react-timekeeper\";\r\nimport { getUser } from \"../../services/auth\";\r\n\r\nexport default function Config() {\r\n   \r\n    const [order, setOrder] = useState(\"00:00\");\r\n    const [closeConfirm, setConfirm] = useState(\"00:00\");\r\n    const [startConfirm, setStartConfirm] = useState(\"00:00\");\r\n    const [forceRefetch, setForceRefetch] = useState(true);\r\n    const { data, refetch } = useQuery(GET_CONFIG);\r\n    const [update, { data: afterUpdate }] = useMutation(UPDATE_CONFIG);\r\n    \r\n\r\n    function handleSave() {\r\n        update({variables:{\r\n            closeConfirm,\r\n            startConfirm,\r\n            order\r\n        }});\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setOrder(data.config.closeOrder);\r\n            setConfirm(data.config.closeConfirm);\r\n            setStartConfirm(data.config.startConfirm);\r\n        }\r\n        \r\n    }, [data, forceRefetch]);\r\n\r\n    useEffect(()=>{\r\n        if(afterUpdate){\r\n            refetch();\r\n            message.success(\"Saved!\");\r\n        }\r\n    }, [afterUpdate])\r\n\r\n    if (getUser(\"role\") === \"MOD\") {\r\n        return (\r\n            <Result\r\n                status=\"403\"\r\n                title=\"403\"\r\n                subTitle=\"Sorry, you are not authorized to access this page.\"\r\n            />\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Divider>\r\n                <h1>\r\n                    <Icon type=\"setting\" /> Config\r\n                </h1>\r\n            </Divider>\r\n\r\n            <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\r\n                <Col span={8} style={{textAlign: \"center\"}}>\r\n                    <h3>Automately close menu at: </h3>\r\n                    <TimeKeeper\r\n                        time={order}\r\n                        hour24Mode\r\n                        onChange={newTime => setOrder(newTime.formatted24)}\r\n                    />\r\n                </Col>\r\n\r\n                <Col span={8} style={{textAlign: \"center\"}}>\r\n                    <h3>Close confirming at: </h3>\r\n                    <TimeKeeper\r\n                        time={closeConfirm}\r\n                        hour24Mode\r\n                        onChange={newTime => setConfirm(newTime.formatted24)}\r\n                    />\r\n                </Col>\r\n\r\n                <Col span={8} style={{textAlign: \"center\"}}>\r\n                    <h3>Start confirming at: </h3>\r\n                    <TimeKeeper\r\n                        time={startConfirm}\r\n                        hour24Mode\r\n                        onChange={newTime => setStartConfirm(newTime.formatted24)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n\r\n            <div style={{textAlign: \"center\", marginTop:\"20px\"}}>\r\n                \r\n                <Button style={{margin:10}} type=\"primary\" onClick={handleSave}>\r\n                    Save\r\n                </Button>\r\n                <Button  style={{margin:10}}  type=\"danger\" onClick={() => setForceRefetch(!forceRefetch)}>\r\n                    Reset\r\n                </Button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Site from \"../components/admin/Site\";\r\nimport User from \"../components/admin/User\";\r\nimport Shop from \"../components/admin/Shop\";\r\nimport Order from \"../components/admin/Order\";\r\nimport Menu from \"../components/admin/Menu\";\r\nimport Config from \"../components/admin/Config\";\r\n\r\nexport default function AdminRoute(props) {\r\n    return (\r\n        <div id=\"AdminRouteWrap\">\r\n            <Switch>\r\n                <Route path={`${props.match.url}/config`} component={Config} />\r\n                <Route path={`${props.match.url}/order`} component={Order} />\r\n                <Route path={`${props.match.url}/menu`} component={Menu} />\r\n                <Route path={`${props.match.url}/shop`} component={Shop} />\r\n                <Route path={`${props.match.url}/site`} component={Site} />\r\n                <Route path={`${props.match.url}/user`} component={User} />\r\n                <Route path={`${props.match.url}/`} component={User} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Menu, Icon, Layout } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getUser } from \"../../services/auth\";\r\nconst { Sider } = Layout;\r\n\r\nfunction getKey(path){\r\n    const pages = [\r\n        '',\r\n        'user',\r\n        'site',\r\n        'shop',\r\n        'menu',\r\n        'order',\r\n        'config'\r\n    ];\r\n\r\n    const curPath = path.split(\"/\")[2] || \"user\";\r\n    const curKey = String(pages.indexOf(curPath));\r\n    return [curKey]\r\n}\r\n\r\nconst leftBarStyle = {\r\n    overflow: \"auto\",\r\n    height: \"100vh\",\r\n    position: \"fixed\",\r\n    left: 0,\r\n    top: 40\r\n}\r\n\r\nexport default function LeftBar(props) {\r\n   \r\n    return (\r\n        <div id=\"LeftBarWrap\">\r\n            <Sider\r\n                style={leftBarStyle}\r\n            >\r\n                <Menu theme=\"dark\" mode=\"inline\" selectedKeys={getKey(props.location.pathname)}>\r\n                    <div style={{color: \"white\", padding: \"20px 25px\", fontWeight: \"bold\"}}>Hello {getUser(\"name\")}!</div>\r\n                    <Menu.Item key=\"1\">\r\n                        <Link to=\"/admin/user\">\r\n                            <Icon type=\"user\" />\r\n                            <span className=\"nav-text\">User</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"2\">\r\n                        <Link to=\"/admin/site\">\r\n                            <Icon type=\"apartment\" />\r\n                            <span className=\"nav-text\">Site</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"3\">\r\n                        <Link to=\"/admin/shop\">\r\n                            <Icon type=\"shop\" />\r\n                            <span className=\"nav-text\">Shop</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"4\">\r\n                        <Link to=\"/admin/menu\">\r\n                            <Icon type=\"menu\" />\r\n                            <span className=\"nav-text\">Menu</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"5\">\r\n                        <Link to=\"/admin/order\">\r\n                            <Icon type=\"profile\" />\r\n                            <span className=\"nav-text\">Order</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n\r\n                    <Menu.Item key=\"6\">\r\n                        <Link to=\"/admin/config\">\r\n                            <Icon type=\"setting\" />\r\n                            <span className=\"nav-text\">Config</span>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Header from \"../Header\"\r\nimport AdminRoute from \"../../route/AdminRoute\";\r\nimport LeftBar from \"./LeftBar\";\r\nimport \"../../assets/css/admin.css\"\r\n\r\nexport default function Admin(props) {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <LeftBar {...props}/>\r\n            <AdminRoute match={props.match}/>\r\n        </div>\r\n    )\r\n}\r\n","import { isLogin, getUser } from \"./auth\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"../components/app/App\";\r\nimport Admin from \"../components/admin/Admin\";\r\n\r\nexport function appGuard(props){\r\n    return isLogin()  ? <App {...props}/>: <Redirect to=\"/login\"/>\r\n}\r\n\r\nexport function adminGuard(props){\r\n    if(isLogin()){\r\n        return ['ADMIN', 'MOD'].includes(getUser('role')) ? <Admin {...props} /> : <App {...props}/>\r\n    }\r\n    return <Redirect to=\"/login\"/>;\r\n}","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport Login from '../components/auth/Login'\r\nimport { appGuard, adminGuard } from '../services/guard'\r\n\r\nexport default function IndexRoute() {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path=\"/admin\" render={adminGuard} />\r\n                <Route path=\"/app\" render={appGuard} />\r\n                <Route path=\"/login\" component={Login}/>\r\n                <Route path=\"/\" render={() => <Redirect to=\"/app\" />}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { isLogin, getUser } from \"../services/auth\";\r\nimport { useSubscription } from \"@apollo/client\";\r\nimport { MENU_PUBLISHED_SUBS } from \"../graphql/menu\";\r\nimport { notification, Icon } from \"antd\";\r\n\r\nexport default function MenuPublishedNotification() {\r\n   \r\n    const {data, loading} = useSubscription(MENU_PUBLISHED_SUBS, {\r\n        variables: {\r\n            site: isLogin() ? getUser('site') : \"\"\r\n        }\r\n    })\r\n    if(!loading && data.menuPublished && isLogin()){\r\n       \r\n        notification.open({\r\n            message: \"Menu is published! Ordering is available now!\",\r\n            icon: <Icon type=\"notification\" />,\r\n            placement: \"bottomLeft\"\r\n        })\r\n    }\r\n    return <div></div>;\r\n}\r\n","import React from \"react\";\nimport IndexRoute from \"../route/IndexRoute\";\n\nimport 'ag-grid-enterprise';\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport MenuPublishedNotification from \"./MenuPublishedNotification\";\n\nfunction App() {\n    return (\n        <div>\n            <IndexRoute />\n            <MenuPublishedNotification/>\n        </div>\n    );\n}\nexport default App;\n","import { ApolloClient, InMemoryCache, ApolloLink, split, HttpLink, getMainDefinition } from '@apollo/client'\nimport {setContext} from \"apollo-link-context\";\nimport { WebSocketLink } from 'apollo-link-ws';\n\nconst httpLink = new HttpLink({\n  uri: \"https://lun-app-randy102.herokuapp.com/graphql\"\n})\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: localStorage.getItem('token') || ''\n  }\n}))\n\nconst wsLink = new WebSocketLink({\n  uri: \"wss://lun-app-randy102.herokuapp.com/graphql\",\n  options: {\n    reconnect: true\n  }\n});\n\nconst linkSplit = split(\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query)\n    return kind === 'OperationDefinition' && operation === 'subscription'\n  },\n  wsLink,\n  httpLink\n)\n\nconst link = ApolloLink.from([authLink,linkSplit])\n\nconst client = new ApolloClient({\n  link: link,\n  cache: new InMemoryCache()\n})\n\nexport { client }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./configs/apollo\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}